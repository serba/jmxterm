jmxterm executable jar

  The executable jar jmxterm-#-uber.jar can be called using <<<java -jar jmxterm-#-uber.jar>>> command which opens an interactive command line console. There are several optional options for this command, option -h(--help) explains the detail of these options. For example

+--------------------------------------------------------------------------------+
jiaqi@happycow:~$ java -jar jmxterm-0.2-uber.jar -h
Welcome to JMX terminal. Type "help" for available commands.
usage: jmxterm [-a] [-h] [-i <val>] [-l <val>] [-o <val>] [-p <val>] [-u <val>]
Main executable of JMX terminal CLI tool
  -a,--abbreviated     Flag for printing abbreviated version
  -h,--help            Show usage of this command line
  -i,--input <val>     Input script file. There can only be one input file.
                     "stdin" is the default value which means console input
  -l,--url <val>       Location of MBean service. It can be <host>:<port> or
                     full service URL.
  -o,--output <val>    Output file, stdout or stderr. Default value is stdout
  -p,--password <val>  Password for user/password authentication
  -u,--user <val>      User name for user/password authentication
Without any option, this command opens an interactive command line based
console. With a given input file, commands in file will be executed and process
ends after file is processed
+--------------------------------------------------------------------------------+

  Therefore the executable jar can be used as

  * <<Interactive console>> - Without any option, it opens an interactive command line console.

  * <<File interpreter>> - With <<<-i>>> option, it processes a given script file and exit in the end.

  * <<Executable script with shebang>> - This is an experimental feature. In theory it can work as shebang in unix script. For example, <<<#!/usr/bin/env java -jar /opt/jmxterm-0.2-uber.jar -a -i>>>.

Commands and options

  Once the console is open, all available commands and options are self explained with <<<help>>> command. For example:

+--------------------------------------------------------------------------------+
jiaqi@rattlesnake:~$ java -jar jmxterm-0.2-uber.jar
Welcome to JMX terminal. Type "help" for available commands.
?$ help
following commands are available to use:
- about            Display about page
- bean             Display or set current selected MBean
- beans            List available beans under a domain or all domains
- bye              Terminate console and exit
- close            Close JMX connection
- domain           Display or set current selected domain
- domains          List all available domain names
- exit             Terminate console and exit
- get              Get value of MBean attribute(s)
- help             Display available commands or usage of a command
- info             Display detail information about an MBean
- jvms             List all running local JVM processes
- open             Open JMX session
- option           Set options for command session
- quit             Terminate console and exit
- run              Invoke an MBean operation
- set              Set value of an MBean attribute
?$ help get
usage: get [-b <val>] [-d <val>] [-h] [-i]
Get value of MBean attribute(s)
  -b,--bean <val>    MBean name where the attribute is. Optional if bean has
                   been set
  -d,--domain <val>  Domain of bean, optional
  -h,--help          Display usage
  -i,--info          Show detail information of each attribute
+--------------------------------------------------------------------------------+

Questions and Answers

  * Q: I just opened an console, what can I do next?

    A: Type <<<help>>> to see available commands. Usually the first thing is to open a connection with open command. For example, <<<open localhost:9991>>>.

  * Q: I can see process X using <<<jvms>>> command, but <<<open X>>> gives me an error. Why?

    A: The feature that connects to any running local Java process is very JDK specific since Java doesn't officially expose API to do such thing. Based on the version of JDK that runs jmxterm as well as version of JDK that runs the process to monitor, it's possible <<<open X>>> doesn't work well.
    
  * Q: How to pass a parameter containing special character such as a white space?
    
    A: Use quots. For example: <<<bean "java.lang:name=Code Cache,type=MemoryPool">>>. Quoted string is always considerred as one parameter.